<objdefs appVersion="1.0.10">
   <obj.normal id="chaotic_lfo" uuid="e945f019-3bcb-4d36-8dfe-ccc6a5f46eb7">
      <sDescription>Simple chaotic lfo

- parameter &quot;val&quot; is range from oscillation to chaos</sDescription>
      <author>JLS</author>
      <license>BSD</license>
      <helpPatch>chaotic_lfo.axh</helpPatch>
      <inlets>
         <bool32 name="active" description="active"/>
         <bool32.rising name="reset" description="reset"/>
      </inlets>
      <outlets>
         <frac32.bipolar name="x" description="axis x"/>
         <frac32.bipolar name="y" description="axis y"/>
         <frac32.bipolar name="z" description="axis z"/>
      </outlets>
      <displays/>
      <params>
         <frac32.u.map name="val" description="from oscillation to chaos" noLabel="false"/>
      </params>
      <attribs/>
      <code.declaration><![CDATA[float x;
float tx;
float y;
float ty;
float z;
float tz;
float a;
float dt;
int res;]]></code.declaration>
      <code.init><![CDATA[x = 0.1;
y = 0.1;
z = 0.1;
a = 0;
dt = 0.02;
res = 0;]]></code.init>
      <code.srate><![CDATA[if (inlet_active>0) {
	
	a = 0.2 + (param_val/640000000.0);

	tx = -y + (z * z);
	ty = x + a * y;
	tz = x - z;

	x = x + tx * dt;
	y = y + ty * dt;
	z = z + tz * dt;
	
	outlet_x = (int32_t) ((0.5+x) * (1<<25));
	outlet_y = (int32_t) ((-0.5+y) * (1<<25));
	outlet_z = (int32_t) ((0.25+z) * (1<<25));

}

else {

	outlet_x = 0;
	outlet_y = 0;
	outlet_z = 0;
	
}

if ((inlet_reset>0) && !res) {
	
   	res = 1;
   	x = 0.1;
	y = 0.1;
	z = 0.1;
	a = 0;
	
} else if (!(inlet_reset>0)) res = 0;]]></code.srate>
   </obj.normal>
</objdefs>